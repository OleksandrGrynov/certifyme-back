// controllers/emailController.js
import { pool } from "../config/db.js";
import { Resend } from "resend";
import jwt from "jsonwebtoken";
import dotenv from "dotenv";

dotenv.config();

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Resend
const resend = new Resend(process.env.RESEND_API_KEY);
const EMAIL_FROM = process.env.EMAIL_FROM;

// üì§ –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –∫–æ–¥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
export async function sendEmailCode(req, res) {
    try {
        const token = req.headers.authorization?.split(" ")[1];
        if (!token) {
            return res
                .status(401)
                .json({ success: false, message: "–ù–µ–º–∞—î —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó" });
        }

        const { id, email } = jwt.verify(token, process.env.JWT_SECRET);
        console.log("üìß –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∫–æ–¥—É –Ω–∞:", email);

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
        if (!process.env.RESEND_API_KEY) {
            console.error("‚ùå RESEND_API_KEY –≤—ñ–¥—Å—É—Ç–Ω—ñ–π");
            return res
                .status(500)
                .json({ success: false, message: "–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∫–ª—é—á RESEND_API_KEY" });
        }

        if (!EMAIL_FROM) {
            console.error("‚ùå EMAIL_FROM –Ω–µ –∑–∞–¥–∞–Ω–∏–π —É .env");
            return res
                .status(500)
                .json({ success: false, message: "EMAIL_FROM –Ω–µ –∑–∞–¥–∞–Ω–∏–π —É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó" });
        }

        // –ó–∞–±–æ—Ä–æ–Ω—è—î–º–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è onboarding@resend.dev
        if (EMAIL_FROM.includes("resend.dev")) {
            console.error("‚ùå EMAIL_FROM –≤—Å–µ —â–µ onboarding@resend.dev ‚Äî –∑–º—ñ–Ω—ñ—Ç—å —É .env");
            return res.status(400).json({
                success: false,
                message:
                    "EMAIL_FROM –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –∞–¥—Ä–µ—Å—É resend.dev. –ó–∞–º—ñ–Ω—ñ—Ç—å —ó—ó –Ω–∞ –∞–¥—Ä–µ—Å—É –≤–∞—à–æ–≥–æ –¥–æ–º–µ–Ω—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥ no-reply@certifyme.me)",
            });
        }

        // –ì–µ–Ω–µ—Ä—É—î–º–æ 6-–∑–Ω–∞—á–Ω–∏–π –∫–æ–¥
        const code = Math.floor(100000 + Math.random() * 900000).toString();

        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∫–æ–¥ —É –ë–î
        await pool.query(
            `INSERT INTO email_verifications (user_id, email, code)
             VALUES ($1, $2, $3)`,
            [id, email, code]
        );

        // –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ª–∏—Å—Ç
        const html = `
            <div style="font-family:Inter,Arial,sans-serif;padding:20px;background:#111;color:#eee;border-radius:10px;">
                <h2 style="color:#4ade80;">CertifyMe</h2>
                <p>–í–∞—à –∫–æ–¥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è:</p>
                <p style="font-size:32px;letter-spacing:6px;color:#4ade80;text-align:center;"><b>${code}</b></p>
                <p>–ö–æ–¥ –¥—ñ–π—Å–Ω–∏–π –ø—Ä–æ—Ç—è–≥–æ–º <b>10 —Ö–≤–∏–ª–∏–Ω</b>.</p>
            </div>`;

        let sendResult;
        try {
            sendResult = await resend.emails.send({
                from: EMAIL_FROM,
                to: email,
                subject: "–ö–æ–¥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è | CertifyMe",
                html,
            });

            console.log("‚úÖ –õ–∏—Å—Ç –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ Resend:", sendResult?.id || sendResult);
        } catch (sendErr) {
            console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ Resend:", sendErr?.message || sendErr);
            return res.status(500).json({
                success: false,
                message: "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –ª–∏—Å—Ç–∞ —á–µ—Ä–µ–∑ Resend",
                detail: sendErr?.message || sendErr,
            });
        }

        res.json({
            success: true,
            message: "–ö–æ–¥ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ ‚úÖ",
            emailSendId: sendResult?.id,
        });
    } catch (err) {
        console.error("‚ùå sendEmailCode error:", err);
        res
            .status(500)
            .json({ success: false, message: "–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –∫–æ–¥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è" });
    }
}

// ‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∫–æ–¥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
export async function verifyEmailCode(req, res) {
    try {
        const token = req.headers.authorization?.split(" ")[1];
        const { id } = jwt.verify(token, process.env.JWT_SECRET);
        const { code } = req.body;

        const result = await pool.query(
            `SELECT * FROM email_verifications
             WHERE user_id=$1 AND code=$2 AND used=FALSE
               AND created_at > NOW() - INTERVAL '10 minutes'
             ORDER BY created_at DESC LIMIT 1`,
            [id, code]
        );

        if (!result.rows.length) {
            return res.status(400).json({
                success: false,
                message: "–ù–µ–≤—ñ—Ä–Ω–∏–π –∞–±–æ –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–∏–π –∫–æ–¥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è",
            });
        }

        await pool.query(
            `UPDATE email_verifications SET used=TRUE WHERE id=$1`,
            [result.rows[0].id]
        );
        await pool.query(`UPDATE users SET email_verified=TRUE WHERE id=$1`, [id]);

        res.json({ success: true, message: "–ü–æ—à—Ç—É —É—Å–ø—ñ—à–Ω–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ üíö" });
    } catch (err) {
        console.error("‚ùå verifyEmailCode error:", err);
        res
            .status(500)
            .json({ success: false, message: "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –∫–æ–¥—É –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è" });
    }
}
