import OpenAI from "openai";
import dotenv from "dotenv";
import axios from "axios";
import { pool } from "../config/db.js";

dotenv.config();
const client = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

// üåç –ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–π –ø–µ—Ä–µ–∫–ª–∞–¥ —á–µ—Ä–µ–∑ Google Translate API
async function translateText(text, from = "uk", to = "en") {
    if (!text || !text.trim()) return text;
    try {
        const response = await axios.get("https://translate.googleapis.com/translate_a/single", {
            params: {
                client: "gtx",
                sl: from,
                tl: to,
                dt: "t",
                q: text,
            },
            timeout: 10000,
        });
        const translated = response.data?.[0]?.map((a) => a[0]).join(" ");
        return translated || text;
    } catch (err) {
        console.error("‚ùå translateText error:", err.message);
        return text;
    }
}

// ======================================================
// üß† –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∞–±–æ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—è—Å–Ω–µ–Ω–Ω—è –∑ –ë–î
// ======================================================
export const explainOneQuestion = async (req, res) => {
    try {
        const { question, options, correct, userAnswer } = req.body;

        if (!question || !options || !correct) {
            return res
                .status(400)
                .json({ success: false, message: "‚ùå –ù–µ –ø–µ—Ä–µ–¥–∞–Ω–æ –¥–∞–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è" });
        }

        // üîç –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –≤–∂–µ –ø–æ—è—Å–Ω–µ–Ω–Ω—è –≤ –±–∞–∑—ñ
        const existing = await pool.query(
            `SELECT explanation_ua, explanation_en FROM explanations WHERE question_text_ua = $1 LIMIT 1`,
            [question.trim()]
        );

        if (existing.rows.length > 0) {
            console.log("‚úÖ –í–∑—è—Ç–æ –∑ –ë–î (–∫–µ—à)");
            return res.json({
                success: true,
                explanation_ua: existing.rows[0].explanation_ua,
                explanation_en: existing.rows[0].explanation_en,
                cached: true,
            });
        }

        // üß© –Ø–∫—â–æ –Ω–µ–º–∞ ‚Äî —Ñ–æ—Ä–º—É—î–º–æ –∑–∞–ø–∏—Ç –¥–æ GPT —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é
        const prompt = `
–¢–∏ ‚Äî –¥–æ—Å–≤—ñ–¥—á–µ–Ω–∏–π –≤–∏–∫–ª–∞–¥–∞—á –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è.
–ü–æ—è—Å–Ω–∏ –∫–æ—Ä–æ—Ç–∫–æ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é:
1Ô∏è‚É£ —á–æ–º—É –ø—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –ø—Ä–∞–≤–∏–ª—å–Ω–∞;
2Ô∏è‚É£ —á–æ–º—É —ñ–Ω—à—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ñ;
3Ô∏è‚É£ —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø–æ–º–∏–ª–∏–≤—Å—è ‚Äî –ø–æ—Ä–∞–¥—å, —è–∫ –∑–∞–ø–∞–º‚Äô—è—Ç–∞—Ç–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—É.

–ü–∏—Ç–∞–Ω–Ω—è: ${question}
–í–∞—Ä—ñ–∞–Ω—Ç–∏: ${options.join(", ")}
–ü—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: ${correct}
–í—ñ–¥–ø–æ–≤—ñ–¥—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: ${userAnswer || "‚Äî"}
        `;

        const completion = await client.chat.completions.create({
            model: "gpt-4o-mini",
            messages: [{ role: "user", content: prompt }],
            temperature: 0.6,
            max_tokens: 500,
        });

        const explanationUa = completion.choices[0].message.content?.trim();
        const explanationEn = await translateText(explanationUa, "uk", "en");

        // üíæ –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –±–∞–∑—É –¥–ª—è –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
        await pool.query(
            `INSERT INTO explanations (question_text_ua, question_text_en, explanation_ua, explanation_en)
             VALUES ($1,$2,$3,$4)`,
            [question, await translateText(question, "uk", "en"), explanationUa, explanationEn]
        );

        console.log("üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–æ –Ω–æ–≤–µ –ø–æ—è—Å–Ω–µ–Ω–Ω—è —É –±–∞–∑—ñ");

        res.json({
            success: true,
            explanation_ua: explanationUa,
            explanation_en: explanationEn,
            cached: false,
        });
    } catch (err) {
        console.error("‚ùå explainOneQuestion error:", err);
        res.status(500).json({
            success: false,
            message: "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—è—Å–Ω–µ–Ω–Ω—è. –ü–µ—Ä–µ–≤—ñ—Ä –∫–ª—é—á –∞–±–æ –±–∞–ª–∞–Ω—Å.",
        });
    }
};
