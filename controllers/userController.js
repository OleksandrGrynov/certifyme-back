import bcrypt from "bcryptjs";
import jwt from "jsonwebtoken";
import crypto from "crypto";
import { pool } from "../config/db.js";
import { initUserAchievements } from "../models/AchievementModel.js";
import { Resend } from "resend";
import dotenv from "dotenv";

dotenv.config();
const resend = new Resend(process.env.RESEND_API_KEY);

// ======================================================
// üì© –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è OTP-–∫–æ–¥—É (6 —Ü–∏—Ñ—Ä)
// ======================================================
async function sendOtpEmail(email, otp) {
    const html = `
      <div style="font-family:sans-serif;padding:20px;background:#111;color:#eee;border-radius:10px;">
        <h2 style="color:#4ade80;">CertifyMe ‚Äî –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –ø–æ—à—Ç–∏</h2>
        <p>–ü—Ä–∏–≤—ñ—Ç! –î—è–∫—É—î–º–æ –∑–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é üíö</p>
        <p>–©–æ–± –∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –∞–∫–∞—É–Ω—Ç, –≤–≤–µ–¥–∏ —Ü–µ–π –∫–æ–¥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è:</p>
        <h1 style="font-size:36px;letter-spacing:6px;color:#4ade80;text-align:center;margin:20px 0;">${otp}</h1>
        <p>–ö–æ–¥ –¥—ñ–π—Å–Ω–∏–π 10 —Ö–≤–∏–ª–∏–Ω. –Ø–∫—â–æ —Ç–∏ –Ω–µ —Ä–µ—î—Å—Ç—Ä—É–≤–∞–≤—Å—è ‚Äî –ø—Ä–æ—Å—Ç–æ —ñ–≥–Ω–æ—Ä—É–π —Ü–µ–π –ª–∏—Å—Ç.</p>
      </div>
    `;

    try {
        const response = await resend.emails.send({
            from: "CertifyMe <onboarding@resend.dev>",
            to: email,
            subject: "–ö–æ–¥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è | CertifyMe",
            html,
        });
        console.log("‚úÖ OTP email sent:", response);
    } catch (err) {
        console.error("‚ùå OTP email send error:", err);
    }
}

// ======================================================
// üîπ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (—Å—Ç–≤–æ—Ä—é—î–º–æ OTP)
// ======================================================
export const registerUser = async (req, res) => {
    try {
        const { first_name, last_name, email, password } = req.body;

        if (!first_name || !last_name || !email || !password) {
            return res.status(400).json({
                success: false,
                message: "–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–ø–æ–≤–Ω—ñ—Ç—å —É—Å—ñ –ø–æ–ª—è (—ñ–º º—è, –ø—Ä—ñ–∑–≤–∏—â–µ, email, –ø–∞—Ä–æ–ª—å)",
            });
        }

        const existing = await pool.query("SELECT * FROM users WHERE email = $1", [email]);
        if (existing.rows.length > 0) {
            return res.status(400).json({ success: false, message: "Email –≤–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è" });
        }

        const hashed = await bcrypt.hash(password, 10);

        // –ì–µ–Ω–µ—Ä—É—î–º–æ 6-–∑–Ω–∞—á–Ω–∏–π OTP —ñ —Ç–µ—Ä–º—ñ–Ω –¥—ñ—ó
        const otp = Math.floor(100000 + Math.random() * 900000).toString();
        const expires = new Date(Date.now() + 10 * 60 * 1000); // 10 —Ö–≤

        const result = await pool.query(
            `INSERT INTO users (first_name, last_name, email, password, role, created_at, is_verified, otp_code, otp_expires)
             VALUES ($1, $2, $3, $4, 'user', NOW(), false, $5, $6)
             RETURNING id, first_name, last_name, email, role, created_at`,
            [first_name, last_name, email, hashed, otp, expires]
        );

        const user = result.rows[0];
        await initUserAchievements(user.id);

        await sendOtpEmail(email, otp);

        res.json({
            success: true,
            message: "‚úÖ –ö–æ–¥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –Ω–∞ –ø–æ—à—Ç—É. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø–æ—à—Ç—É —Ç–∞ –≤–≤–µ–¥—ñ—Ç—å 6 —Ü–∏—Ñ—Ä.",
        });
    } catch (err) {
        console.error("‚ùå registerUser error:", err);
        res.status(500).json({ success: false, message: "Server error" });
    }
};

// ======================================================
// üîπ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ OTP-–∫–æ–¥—É
// ======================================================
export const verifyOtp = async (req, res) => {
    try {
        const { email, otp } = req.body;

        if (!email || !otp) {
            return res.status(400).json({ success: false, message: "–í–≤–µ–¥—ñ—Ç—å email —ñ –∫–æ–¥" });
        }

        const result = await pool.query(
            `SELECT * FROM users WHERE email = $1 AND otp_code = $2`,
            [email, otp]
        );

        if (result.rows.length === 0) {
            return res.status(400).json({ success: false, message: "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –∫–æ–¥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è" });
        }

        const user = result.rows[0];
        const now = new Date();
        const expires = new Date(user.otp_expires);

        if (now > expires) {
            return res.status(400).json({ success: false, message: "‚è∞ –ö–æ–¥ –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–∏–π. –ó–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—è –∑–Ω–æ–≤—É." });
        }

        // ‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î–º–æ –∞–∫–∞—É–Ω—Ç
        await pool.query(
            `UPDATE users SET is_verified = true, otp_code = NULL, otp_expires = NULL WHERE email = $1`,
            [email]
        );

        // –°—Ç–≤–æ—Ä—é—î–º–æ JWT —Ç–æ–∫–µ–Ω –ø—ñ—Å–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
        const token = jwt.sign(
            { id: user.id, role: user.role, first_name: user.first_name, last_name: user.last_name },
            process.env.JWT_SECRET,
            { expiresIn: "7d" }
        );

        res.json({
            success: true,
            message: "‚úÖ –ê–∫–∞—É–Ω—Ç –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ. –í—Ö—ñ–¥ –≤–∏–∫–æ–Ω–∞–Ω–æ.",
            token,
            user: {
                id: user.id,
                first_name: user.first_name,
                last_name: user.last_name,
                email: user.email,
                role: user.role,
            },
        });
    } catch (err) {
        console.error("‚ùå verifyOtp error:", err);
        res.status(500).json({ success: false, message: "Server error" });
    }
};

// ======================================================
// üîπ –õ–æ–≥—ñ–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (—Ç—ñ–ª—å–∫–∏ –ø—ñ—Å–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è OTP)
// ======================================================
export const loginUser = async (req, res) => {
    try {
        const { email, password } = req.body;

        const result = await pool.query("SELECT * FROM users WHERE email = $1", [email]);
        if (result.rows.length === 0) {
            return res.status(400).json({ success: false, message: "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });
        }

        const user = result.rows[0];
        const isValid = await bcrypt.compare(password, user.password);

        if (!isValid) {
            return res.status(401).json({ success: false, message: "–ù–µ–≤—ñ—Ä–Ω–∏–π –ø–∞—Ä–æ–ª—å" });
        }

        if (!user.is_verified) {
            return res.status(403).json({
                success: false,
                message: "–ë—É–¥—å –ª–∞—Å–∫–∞, –ø—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –ø–æ—à—Ç—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–æ–¥—É, —è–∫–∏–π –º–∏ –Ω–∞–¥—ñ—Å–ª–∞–ª–∏.",
            });
        }

        const token = jwt.sign(
            { id: user.id, role: user.role, first_name: user.first_name, last_name: user.last_name },
            process.env.JWT_SECRET,
            { expiresIn: "7d" }
        );

        res.json({
            success: true,
            message: "–í—Ö—ñ–¥ —É—Å–ø—ñ—à–Ω–∏–π ‚úÖ",
            token,
            user: {
                id: user.id,
                first_name: user.first_name,
                last_name: user.last_name,
                email: user.email,
                role: user.role,
                created_at: user.created_at,
            },
        });
    } catch (err) {
        console.error("‚ùå loginUser error:", err);
        res.status(500).json({ success: false, message: "Server error" });
    }
};

// ======================================================
// üîπ –û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
// ======================================================
export const getCurrentUser = async (req, res) => {
    try {
        const token = req.headers.authorization?.split(" ")[1];
        if (!token)
            return res.status(401).json({ success: false, message: "–ù–µ–º–∞—î —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó" });

        const decoded = jwt.verify(token, process.env.JWT_SECRET);

        const userRes = await pool.query(
            `SELECT id, first_name, last_name, email, role, created_at, is_verified
             FROM users WHERE id = $1`,
            [decoded.id]
        );

        if (userRes.rows.length === 0)
            return res.status(404).json({ success: false, message: "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });

        res.json({ success: true, user: userRes.rows[0] });
    } catch (err) {
        console.error("‚ùå getCurrentUser error:", err);
        res.status(500).json({ success: false, message: "Server error" });
    }
};

// ======================================================
// üîπ –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é
// ======================================================
export const updateProfile = async (req, res) => {
    try {
        const token = req.headers.authorization?.split(" ")[1];
        if (!token)
            return res.status(401).json({ success: false, message: "–ù–µ–º–∞—î —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó" });

        const decoded = jwt.verify(token, process.env.JWT_SECRET);
        const { first_name, last_name, email } = req.body;

        if (!first_name || !last_name || !email) {
            return res.status(400).json({
                success: false,
                message: "–£—Å—ñ –ø–æ–ª—è –æ–±–æ–≤ º—è–∑–∫–æ–≤—ñ (—ñ–º º—è, –ø—Ä—ñ–∑–≤–∏—â–µ, email)",
            });
        }

        const result = await pool.query(
            `UPDATE users
             SET first_name = $1, last_name = $2, email = $3
             WHERE id = $4
             RETURNING id, first_name, last_name, email, role, created_at, is_verified`,
            [first_name, last_name, email, decoded.id]
        );

        if (result.rows.length === 0) {
            return res.status(404).json({ success: false, message: "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });
        }

        res.json({
            success: true,
            message: "–ü—Ä–æ—Ñ—ñ–ª—å –æ–Ω–æ–≤–ª–µ–Ω–æ ‚úÖ",
            user: result.rows[0],
        });
    } catch (err) {
        console.error("‚ùå updateProfile error:", err);
        res.status(500).json({ success: false, message: "Server error" });
    }
};

// ======================================================
// üîí –ó–º—ñ–Ω–∞ –ø–∞—Ä–æ–ª—è
// ======================================================
export const changePassword = async (req, res) => {
    try {
        const token = req.headers.authorization?.split(" ")[1];
        if (!token)
            return res.status(401).json({ success: false, message: "–ù–µ–º–∞—î —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó" });

        const decoded = jwt.verify(token, process.env.JWT_SECRET);
        const { oldPassword, newPassword } = req.body;

        const userRes = await pool.query("SELECT password FROM users WHERE id = $1", [decoded.id]);
        if (userRes.rows.length === 0)
            return res.status(404).json({ success: false, message: "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });

        const isMatch = await bcrypt.compare(oldPassword, userRes.rows[0].password);
        if (!isMatch)
            return res.status(400).json({ success: false, message: "–°—Ç–∞—Ä–∏–π –ø–∞—Ä–æ–ª—å –Ω–µ–≤—ñ—Ä–Ω–∏–π" });

        const hashed = await bcrypt.hash(newPassword, 10);
        await pool.query("UPDATE users SET password = $1 WHERE id = $2", [hashed, decoded.id]);

        res.json({ success: true, message: "–ü–∞—Ä–æ–ª—å —É—Å–ø—ñ—à–Ω–æ –∑–º—ñ–Ω–µ–Ω–æ ‚úÖ" });
    } catch (err) {
        console.error("‚ùå changePassword error:", err);
        res.status(500).json({ success: false, message: "Server error" });
    }
};
// ======================================================
// üîë –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–∞—Ä–æ–ª—è –ø—ñ—Å–ª—è Google-–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
// ======================================================
export const setPassword = async (req, res) => {
    try {
        const token = req.headers.authorization?.split(" ")[1];
        if (!token)
            return res
                .status(401)
                .json({ success: false, message: "–ù–µ–º–∞—î —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó" });

        const decoded = jwt.verify(token, process.env.JWT_SECRET);
        const userId = decoded.id;

        const { newPassword } = req.body;
        if (!newPassword)
            return res
                .status(400)
                .json({ success: false, message: "–ü–æ–ª–µ newPassword –æ–±–æ–≤'—è–∑–∫–æ–≤–µ" });

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —ñ—Å–Ω—É—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
        const userRes = await pool.query(
            "SELECT id FROM users WHERE id = $1",
            [userId]
        );
        if (userRes.rows.length === 0)
            return res
                .status(404)
                .json({ success: false, message: "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });

        // –•–µ—à—É—î–º–æ –ø–∞—Ä–æ–ª—å
        const hashed = await bcrypt.hash(newPassword, 10);
        await pool.query(
            "UPDATE users SET password = $1 WHERE id = $2",
            [hashed, userId]
        );

        res.json({
            success: true,
            message: "–ü–∞—Ä–æ–ª—å —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ ‚úÖ",
        });
    } catch (err) {
        console.error("‚ùå setPassword error:", err.message);
        res
            .status(500)
            .json({ success: false, message: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—ñ–¥ —á–∞—Å –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–∞—Ä–æ–ª—è" });
    }
};
