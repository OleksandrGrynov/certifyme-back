import bcrypt from "bcryptjs";
import jwt from "jsonwebtoken";
import { pool } from "../config/db.js";
import { initUserAchievements } from "../models/AchievementModel.js";

// üîπ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
export const registerUser = async (req, res) => {
    try {
        const { first_name, last_name, email, password } = req.body;

        if (!first_name || !last_name || !email || !password) {
            return res.status(400).json({
                success: false,
                message: "–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–ø–æ–≤–Ω—ñ—Ç—å —É—Å—ñ –ø–æ–ª—è (—ñ–º º—è, –ø—Ä—ñ–∑–≤–∏—â–µ, email, –ø–∞—Ä–æ–ª—å)",
            });
        }

        // üî∏ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ—Å–Ω—É—é—á–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        const existing = await pool.query("SELECT * FROM users WHERE email = $1", [email]);
        if (existing.rows.length > 0) {
            return res.status(400).json({ success: false, message: "Email –≤–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è" });
        }

        // üî∏ —Ö–µ—à—É–≤–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—é
        const hashed = await bcrypt.hash(password, 10);

        // üî∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        const result = await pool.query(
            `INSERT INTO users (first_name, last_name, email, password, role, created_at)
             VALUES ($1, $2, $3, $4, 'user', NOW())
                 RETURNING id, first_name, last_name, email, role, created_at`,
            [first_name, last_name, email, hashed]
        );

        const user = result.rows[0];

        // üîπ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –¥–æ—Å—è–≥–Ω–µ–Ω—å (—â–æ–± –Ω–æ–≤–æ–º—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É —Å—Ç–≤–æ—Ä–∏–ª–∏—Å—è –≤—Å—ñ 15)
        await initUserAchievements(user.id);

        // üîπ –°—Ç–≤–æ—Ä—é—î–º–æ JWT —Ç–æ–∫–µ–Ω
        const token = jwt.sign(
            { id: user.id, role: user.role, first_name: user.first_name, last_name: user.last_name },
            process.env.JWT_SECRET,
            { expiresIn: "7d" }
        );

        res.json({
            success: true,
            message: "–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞ ‚úÖ",
            token,
            user,
        });
    } catch (err) {
        console.error("‚ùå registerUser error:", err);
        res.status(500).json({ success: false, message: "Server error" });
    }
};

// üîπ –õ–æ–≥—ñ–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
export const loginUser = async (req, res) => {
    try {
        const { email, password } = req.body;

        const result = await pool.query("SELECT * FROM users WHERE email = $1", [email]);
        if (result.rows.length === 0) {
            return res.status(400).json({ success: false, message: "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });
        }

        const user = result.rows[0];
        const isValid = await bcrypt.compare(password, user.password);

        if (!isValid) {
            return res.status(401).json({ success: false, message: "–ù–µ–≤—ñ—Ä–Ω–∏–π –ø–∞—Ä–æ–ª—å" });
        }

        const token = jwt.sign(
            { id: user.id, role: user.role, first_name: user.first_name, last_name: user.last_name },
            process.env.JWT_SECRET,
            { expiresIn: "7d" }
        );

        res.json({
            success: true,
            message: "–í—Ö—ñ–¥ —É—Å–ø—ñ—à–Ω–∏–π ‚úÖ",
            token,
            user: {
                id: user.id,
                first_name: user.first_name,
                last_name: user.last_name,
                email: user.email,
                role: user.role,
                created_at: user.created_at,
            },
        });
    } catch (err) {
        console.error("‚ùå loginUser error:", err);
        res.status(500).json({ success: false, message: "Server error" });
    }
};

// üîπ –û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
export const getCurrentUser = async (req, res) => {
    try {
        const token = req.headers.authorization?.split(" ")[1];
        if (!token)
            return res.status(401).json({ success: false, message: "–ù–µ–º–∞—î —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó" });

        const decoded = jwt.verify(token, process.env.JWT_SECRET);

        const userRes = await pool.query(
            `SELECT id, first_name, last_name, email, role, created_at
             FROM users WHERE id = $1`,
            [decoded.id]
        );

        if (userRes.rows.length === 0)
            return res.status(404).json({ success: false, message: "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });

        res.json({ success: true, user: userRes.rows[0] });
    } catch (err) {
        console.error("‚ùå getCurrentUser error:", err);
        res.status(500).json({ success: false, message: "Server error" });
    }
};

// üîπ –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é
export const updateProfile = async (req, res) => {
    try {
        const token = req.headers.authorization?.split(" ")[1];
        if (!token)
            return res.status(401).json({ success: false, message: "–ù–µ–º–∞—î —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó" });

        const decoded = jwt.verify(token, process.env.JWT_SECRET);
        const { first_name, last_name, email } = req.body;

        const result = await pool.query(
            `UPDATE users
             SET first_name = $1, last_name = $2, email = $3
             WHERE id = $4
                 RETURNING id, first_name, last_name, email, role, created_at`,
            [first_name, last_name, email, decoded.id]
        );

        res.json({
            success: true,
            message: "–ü—Ä–æ—Ñ—ñ–ª—å –æ–Ω–æ–≤–ª–µ–Ω–æ ‚úÖ",
            user: result.rows[0],
        });
    } catch (err) {
        console.error("‚ùå updateProfile error:", err);
        res.status(500).json({ success: false, message: "Server error" });
    }
};

// üîí –ó–º—ñ–Ω–∞ –ø–∞—Ä–æ–ª—è
export const changePassword = async (req, res) => {
    try {
        const token = req.headers.authorization?.split(" ")[1];
        if (!token)
            return res.status(401).json({ success: false, message: "–ù–µ–º–∞—î —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó" });

        const decoded = jwt.verify(token, process.env.JWT_SECRET);
        const { oldPassword, newPassword } = req.body;

        const userRes = await pool.query("SELECT password FROM users WHERE id = $1", [decoded.id]);
        if (userRes.rows.length === 0)
            return res.status(404).json({ success: false, message: "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });

        const isMatch = await bcrypt.compare(oldPassword, userRes.rows[0].password);
        if (!isMatch)
            return res.status(400).json({ success: false, message: "–°—Ç–∞—Ä–∏–π –ø–∞—Ä–æ–ª—å –Ω–µ–≤—ñ—Ä–Ω–∏–π" });

        const hashed = await bcrypt.hash(newPassword, 10);
        await pool.query("UPDATE users SET password = $1 WHERE id = $2", [hashed, decoded.id]);

        res.json({ success: true, message: "–ü–∞—Ä–æ–ª—å —É—Å–ø—ñ—à–Ω–æ –∑–º—ñ–Ω–µ–Ω–æ ‚úÖ" });
    } catch (err) {
        console.error("‚ùå changePassword error:", err);
        res.status(500).json({ success: false, message: "Server error" });
    }
};
