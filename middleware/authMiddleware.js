// middleware/authMiddleware.js
import jwt from "jsonwebtoken";
import { pool } from "../config/db.js";

export default async function authMiddleware(req, res, next) {
    const token = req.headers.authorization?.split(" ")[1];
    if (!token)
        return res.status(401).json({ success: false, message: "No token provided" });

    try {
        // 1Ô∏è‚É£ –†–æ–∑—à–∏—Ñ—Ä–æ–≤—É—î–º–æ —Ç–æ–∫–µ–Ω
        const decoded = jwt.verify(token, process.env.JWT_SECRET);

        // 2Ô∏è‚É£ –û—Ç—Ä–∏–º—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –ë–î (—â–æ–± –ø—ñ–¥—Ç—è–≥–Ω—É—Ç–∏ —Ä–æ–ª—å)
        const userRes = await pool.query(
            "SELECT id, email, role, first_name, last_name FROM users WHERE id = $1",
            [decoded.id]
        );

        if (userRes.rows.length === 0)
            return res.status(401).json({ success: false, message: "User not found" });

        // 3Ô∏è‚É£ –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ–≤–Ω—É —ñ–Ω—Ñ—É –≤ req.user
        req.user = userRes.rows[0];
        next();
    } catch (err) {
        console.error("‚ùå authMiddleware error:", err.message);
        return res
            .status(403)
            .json({ success: false, message: "Invalid or expired token" });
    }
}

// üîí –æ–∫—Ä–µ–º–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–ª—è —Ä–æ–ª—ñ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
export function adminOnly(req, res, next) {
    if (!req.user) {
        return res.status(401).json({ success: false, message: "Not authenticated" });
    }
    if (req.user.role !== "admin") {
        return res
            .status(403)
            .json({ success: false, message: "Access denied: admin only" });
    }
    next();
}
