// routes/testRoutes.js
import express from "express";
import {
    createTest, getAllTests, deleteTest, updateTest,
    getTestById, generateCertificate, verifyCertificate
} from "../controllers/testController.js";
import authMiddleware, { isAdmin } from "../middleware/authMiddleware.js";
import { explainOneQuestion } from "../controllers/explanationController.js";
import { getUserCertificates } from "../controllers/testController.js";
import { pool } from "../config/db.js";

const router = express.Router();

// üåç –ü—É–±–ª—ñ—á–Ω—ñ
router.get("/", getAllTests);
router.get("/user/certificates", authMiddleware, getUserCertificates);
// ‚úÖ QR/–ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –°–ï–†–¢–ò–§–Ü–ö–ê–¢–ê –ú–ê–Ñ –ë–£–¢–ò –†–ê–ù–Ü–®–ï
router.get("/certificates/:cert_id", verifyCertificate);

// –ü–æ—Ç—ñ–º —É–∂–µ –¥–∏–Ω–∞–º—ñ—á–Ω–∏–π id —Ç–µ—Å—Ç—É
router.get("/:id", getTestById);

// üîí –ê–¥–º—ñ–Ω–∫–∞
router.post("/", authMiddleware, isAdmin, createTest);
router.put("/:id", authMiddleware, isAdmin, updateTest);
router.delete("/:id", authMiddleware, isAdmin, deleteTest);

// ü™™ –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è PDF
router.post("/certificate", authMiddleware, generateCertificate);

// üß† –ü–æ—è—Å–Ω–µ–Ω–Ω—è
router.post("/explain-one", explainOneQuestion);
router.put("/:id/questions", authMiddleware, isAdmin, async (req, res) => {
    const {id} = req.params;
    const {questions} = req.body;

    try {
        // –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —ñ –ø–∏—Ç–∞–Ω–Ω—è
        await pool.query(
            "DELETE FROM answers WHERE question_id IN (SELECT id FROM questions WHERE test_id = $1)",
            [id]
        );
        await pool.query("DELETE FROM questions WHERE test_id = $1", [id]);

        // –î–æ–¥–∞—î–º–æ –Ω–æ–≤—ñ –ø–∏—Ç–∞–Ω–Ω—è
        for (const q of questions) {
            const qRes = await pool.query(
                `INSERT INTO questions (test_id, question_ua, question_en)
                 VALUES ($1, $2, $3) RETURNING id`,
                [id, q.question_ua, q.question_en]
            );

            const questionId = qRes.rows[0].id;

            // –î–æ–¥–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
            for (const a of q.answers) {
                await pool.query(
                    `INSERT INTO answers (question_id, answer_ua, answer_en, is_correct)
                     VALUES ($1, $2, $3, $4)`,
                    [questionId, a.answer_ua, a.answer_en, a.is_correct]
                );
            }
        }

        res.json({success: true, message: "‚úÖ –ü–∏—Ç–∞–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ"});
    } catch (err) {
        console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–∏—Ç–∞–Ω—å:", err);
        res.status(500).json({
            success: false,
            message: "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –ø–∏—Ç–∞–Ω—å",
        });
    }
});
export default router;
