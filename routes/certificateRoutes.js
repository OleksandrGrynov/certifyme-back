// routes/certificateRoutes.js
import express from "express";
import path from "path";
import fs from "fs";
import { generateCertificatePDF } from "../utils/certificateGenerator.js";

const router = express.Router();

// –ü–æ–≤–µ—Ä—Ç–∞—î –∞–±–æ –≥–µ–Ω–µ—Ä—É—î —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç, —è–∫—â–æ –Ω–µ —ñ—Å–Ω—É—î
router.get("/:filename", async (req, res) => {
    try {
        const filename = req.params.filename;
        const certPath = path.join("certificates", filename);

        // –Ø–∫—â–æ —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç –≤–∂–µ —ñ—Å–Ω—É—î ‚Äî –ø—Ä–æ—Å—Ç–æ –≤—ñ–¥–¥–∞—î–º–æ
        if (fs.existsSync(certPath)) {
            return res.sendFile(path.resolve(certPath));
        }

        // –Ü–Ω–∞–∫—à–µ –≥–µ–Ω–µ—Ä—É—î–º–æ –Ω–æ–≤–∏–π PDF
        const id = filename.replace("certificate_", "").replace(".pdf", "");
        console.log(`üìú –°–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç ${id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ ‚Äî –≥–µ–Ω–µ—Ä—É—î–º–æ –∑–∞–Ω–æ–≤–æ...`);

        const resultPath = await generateCertificatePDF(id); // —Å—Ç–≤–æ—Ä—é—î —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î —à–ª—è—Ö
        return res.sendFile(path.resolve(resultPath));
    } catch (err) {
        console.error("‚ùå Error serving certificate:", err);
        res.status(500).json({ message: "Error loading certificate" });
    }
});

export default router;
