// adminRoutes.js
import express from "express";
import { pool } from "../config/db.js";
import authMiddleware, { isAdmin } from "../middleware/authMiddleware.js";

const router = express.Router();

// üîπ –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
router.get("/users", authMiddleware, isAdmin, async (req, res) => {
    try {
        const result = await pool.query(`
            SELECT
                id,
                first_name || ' ' || last_name AS full_name,
                email,
                role,
                TO_CHAR(created_at, 'YYYY-MM-DD HH24:MI') AS created_at
            FROM users
            ORDER BY id ASC
        `);
        res.json({ success: true, users: result.rows });
    } catch (err) {
        console.error("‚ùå getAllUsers error:", err);
        res.status(500).json({ success: false, message: "Server error" });
    }
});

// üîπ –í–∏–¥–∞–ª–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
router.delete("/users/:id", authMiddleware, isAdmin, async (req, res) => {
    const client = await pool.connect();
    try {
        const { id } = req.params;
        const userRes = await client.query("SELECT role FROM users WHERE id = $1", [id]);
        if (userRes.rows.length === 0)
            return res.status(404).json({ success: false, message: "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });

        if (userRes.rows[0].role === "admin")
            return res.status(403).json({ success: false, message: "–ù–µ–º–æ–∂–ª–∏–≤–æ –≤–∏–¥–∞–ª–∏—Ç–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞" });

        // –í–∏–∫–æ–Ω—É—î–º–æ –∫–∞—Å–∫–∞–¥–Ω–µ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –≤—Ä—É—á–Ω—É –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó —è–∫ –±–µ–∑–ø–µ—á–Ω–∏–π fallback
        await client.query("BEGIN");

        // –í–∏–¥–∞–ª—è—î–º–æ —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç–∏, –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è —Ç–∞ —ñ–Ω—à—ñ –ø–æ–≤'—è–∑–∞–Ω—ñ –¥–∞–Ω—ñ
        await client.query("DELETE FROM certificates WHERE user_id = $1", [id]);
        await client.query("DELETE FROM user_achievements WHERE user_id = $1", [id]);
        // –î–æ–¥–∞—Ç–∫–æ–≤—ñ —Ç–∞–±–ª–∏—Ü—ñ, —è–∫—â–æ –≤–æ–Ω–∏ —î —É –≤–∞—à—ñ–π –ë–î ‚Äî —Ä–æ–∑–∫–æ–º–µ–Ω—Ç—É–π—Ç–µ –∞–±–æ –¥–æ–¥–∞–π—Ç–µ —Ç—É—Ç
        // await client.query("DELETE FROM reviews WHERE user_id = $1", [id]);
        // await client.query("DELETE FROM submissions WHERE user_id = $1", [id]);

        // –í–ª–∞—Å–Ω–µ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        await client.query("DELETE FROM users WHERE id = $1", [id]);

        await client.query("COMMIT");
        res.json({ success: true });
    } catch (err) {
        await client.query("ROLLBACK");
        console.error("‚ùå deleteUser error:", err);
        res.status(500).json({ success: false, message: "Server error" });
    } finally {
        client.release();
    }
});

// üîπ –û–Ω–æ–≤–∏—Ç–∏ —Ä–æ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–∞–¥–º—ñ–Ω)
router.put("/users/:id", authMiddleware, isAdmin, async (req, res) => {
    try {
        const { id } = req.params;
        const { role } = req.body;

        const allowedRoles = ["user", "admin"];
        if (!role || !allowedRoles.includes(role)) {
            return res.status(400).json({ success: false, message: "Invalid role" });
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —ñ—Å–Ω—É—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
        const userRes = await pool.query("SELECT id, role FROM users WHERE id = $1", [id]);
        if (userRes.rows.length === 0) {
            return res.status(404).json({ success: false, message: "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });
        }

        const currentRole = userRes.rows[0].role;

        // –Ø–∫—â–æ –Ω–∞–º–∞–≥–∞—é—Ç—å—Å—è –ø–æ–Ω–∏–∑–∏—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –∞–¥–º—ñ–Ω–∞ ‚Äî –∑–∞–±–æ—Ä–æ–Ω–∏—Ç–∏
        if (currentRole === "admin" && role !== "admin") {
            const adminsCountRes = await pool.query("SELECT COUNT(*) FROM users WHERE role = 'admin'");
            const adminsCount = Number(adminsCountRes.rows[0].count || 0);
            if (adminsCount <= 1) {
                return res.status(400).json({ success: false, message: "–ù–µ–º–æ–∂–ª–∏–≤–æ –ø–æ–Ω–∏–∑–∏—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞" });
            }
        }

        // –û–Ω–æ–≤–ª—é—î–º–æ —Ä–æ–ª—å
        const updated = await pool.query(
            `UPDATE users SET role = $1 WHERE id = $2 RETURNING id, first_name, last_name, email, role, created_at`,
            [role, id]
        );

        res.json({ success: true, user: updated.rows[0] });
    } catch (err) {
        console.error("‚ùå updateUserRole error:", err);
        res.status(500).json({ success: false, message: "Server error" });
    }
});

// üîπ –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç–∏
router.get("/certificates", authMiddleware, isAdmin, async (req, res) => {
    try {
        const query = `
            SELECT
                c.*,
                -- –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ master user —è–∫ JSON-–æ–±'—î–∫—Ç (—è–∫—â–æ —î), –∞–ª–µ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ legacy-–ø–æ–ª—è –¥–ª—è backward-compat
                json_build_object(
                  'id', u.id,
                  'name', COALESCE(u.first_name || ' ' || u.last_name, c.user_name),
                  'email', COALESCE(u.email, c.user_email, '-')
                ) AS "user",
                COALESCE(t.title_ua, c.course) AS test_title
            FROM certificates c
                     LEFT JOIN users u ON u.id = c.user_id
                     LEFT JOIN tests t ON t.id = c.test_id
            ORDER BY c.issued DESC;
        `;
        const result = await pool.query(query);
        res.json({ success: true, certificates: result.rows });
    } catch (err) {
        console.error("‚ùå getAllCertificates error:", err);
        res.status(500).json({ success: false, message: "Server error" });
    }
});

// üîπ –í–∏–¥–∞–ª–∏—Ç–∏ —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç
router.delete("/certificates/:id", authMiddleware, isAdmin, async (req, res) => {
    try {
        const { id } = req.params;
        await pool.query("DELETE FROM certificates WHERE id = $1", [id]);
        res.json({ success: true });
    } catch (err) {
        console.error("‚ùå deleteCertificate error:", err);
        res.status(500).json({ success: false, message: "Server error" });
    }
});
// üîπ –û—Ç—Ä–∏–º–∞—Ç–∏ –∞–Ω–∞–ª—ñ—Ç–∏–∫—É
// üîπ –û—Ç—Ä–∏–º–∞—Ç–∏ –∞–Ω–∞–ª—ñ—Ç–∏–∫—É (–æ–Ω–æ–≤–ª–µ–Ω–æ)
router.get("/stats", authMiddleware, isAdmin, async (req, res) => {
    try {
        // –û—Å–Ω–æ–≤–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        const [users, tests, certs] = await Promise.all([
            pool.query("SELECT COUNT(*) FROM users"),
            pool.query("SELECT COUNT(*) FROM tests"),
            pool.query("SELECT COUNT(*) FROM certificates"),
        ]);

        const avgPercent = await pool.query("SELECT AVG(percent) FROM certificates");

        // –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç—ñ–≤ –ø–æ —Ç–µ—Å—Ç–∞—Ö
        const certsByTest = await pool.query(`
            SELECT t.title_ua AS test, COUNT(c.id) AS count
            FROM certificates c
                JOIN tests t ON t.id = c.test_id
            GROUP BY t.title_ua
            ORDER BY count DESC;
        `);

        // üìà –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –ø–æ –º—ñ—Å—è—Ü—è—Ö (–∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ–π —Ä—ñ–∫)
        const usersByMonth = await pool.query(`
            SELECT TO_CHAR(created_at, 'YYYY-MM') AS month, COUNT(*) AS count
            FROM users
            WHERE created_at >= NOW() - INTERVAL '12 months'
            GROUP BY month
            ORDER BY month ASC;
        `);

        res.json({
            success: true,
            stats: {
                users: Number(users.rows[0].count),
                tests: Number(tests.rows[0].count),
                certificates: Number(certs.rows[0].count),
                avg_percent: Math.round(avgPercent.rows[0].avg || 0),
                certs_by_test: certsByTest.rows,
                users_by_month: usersByMonth.rows,
            },
        });
    } catch (err) {
        console.error("‚ùå getStats error:", err);
        res.status(500).json({ success: false, message: "Server error" });
    }
});


export default router;
